const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const User = require("./mongoose/model-user");

const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost:27017/DuckLearnTech", {
  useNewUrlParser: true,
  useCreateIndex: true,
  useFindAndModify: false,
  useUnifiedTopology: true,
});

const { actions } = require("./actions/actions");
const { payFuncs } = require("./pay2");

const bot = new Telegraf(process.env.BOT_TOKEN); //—Å—é–¥–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª botFather

/* bot.use(Telegraf.log()); */

bot.command("start", (ctx) => {
  return ctx.replyWithHTML(
    "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ <b>DuckLearnTech_bot</b> üéâ. –Ø –ø–æ–º–æ–≥—É –í–∞–º —Å –∫—É—Ä—Å–∞–º–∏. –î–∞–≤–∞–π—Ç–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –∫—É—Ä—Å—ã –∫–æ—Ç–æ—Ä–æ–π –∏–∑—É—á–∞–µ—Ç–µ:",
    Markup.inlineKeyboard([
      [Markup.callbackButton("1–°-–ë–∏—Ç—Ä–∏–∫—Å", "action_1c_bitrix")],
      [Markup.callbackButton("üñ® –î–æ–≥–æ–≤–æ—Ä-–æ—Ñ–µ—Ä—Ç–∞", "action_license")],
    ]).extra()
  );
});

actions(bot);
payFuncs(bot);

// –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ
bot.on("pre_checkout_query", (ctx) => {
  return ctx.answerPreCheckoutQuery(true);
});

bot.on("successful_payment", async (ctx) => {
  User.findOne({ chatId: String(ctx.from.id) })
    .then((res) => {
      const payedAction = JSON.parse(
        ctx.update.message.successful_payment.invoice_payload
      ).action;
      if (res !== null) {
        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—Å—Ç—å –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å
        User.findByIdAndUpdate(res._id, {
          $push: {
            payed: payedAction,
          },
        }).exec();
      }
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å
      else {
        User.create({
          chatId: ctx.from.id,
          payed: payedAction,
        });
      }
      return ctx.replyWithHTML(
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ <b>—É—Å–ø–µ—à–Ω–æ</b>! üéâ –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        Markup.inlineKeyboard([
          Markup.callbackButton("ü§ì –ü–µ—Ä–µ–π—Ç–∏", payedAction),
          Markup.callbackButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action_main"),
        ]).extra()
      );
    })
    .catch((err) => {
      ctx.deleteMessage();
      return ctx.replyWithHTML(
        `‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<b>${err.message}</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @tiamin1989`,
        Markup.inlineKeyboard([
          [Markup.callbackButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action_main")],
        ]).extra()
      );
    });
});

/* –î–ª—è –∫–Ω–æ–ø–∫–∏
bot.action("Coke1", (ctx) => ctx.reply("üëç")); */

/* –î–ª—è —Ç–µ–∫—Å—Ç–∞ 
bot.hears("Coke", (ctx) => ctx.reply("Yay!")); */

bot.launch();

module.exports = {
  bot,
};
